# -*- python -*-
# ex: set filetype=python:

import os
import json

from buildbot.plugins import *

local_settings = json.load(open(os.environ['BUILDBOT_SETTINGS']))
buildbot_host = local_settings['host']

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config = local_settings['config']

# ###### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

workers = config['workers']
# loop over available OS configurations
for os_cfg_key in config['os-list']:
    os_cfg_worker_list = workers[os_cfg_key]
    # loop over workers per OS config
    for cfg_worker in os_cfg_worker_list:
        bb_worker = worker.Worker(cfg_worker, local_settings['worker_pass'])
        c['workers'].append(bb_worker)

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

# ###### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
# c['change_source'].append(
#     changes.GitPoller(
#         'https://github.com/golemfactory/golem.git',
#         workdir='gitpoller-workdir', branches=True,
#         pollinterval=300))

# ###### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'buildpackage' build

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="all",
                            treeStableTimer=20,
                            builderNames=["buildpackage_macOS", "buildpackage_linux", "buildpackage_windows"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["buildpackage_macOS", "buildpackage_linux", "buildpackage_windows"]))

# ###### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []


def __step_add_checkout(factory):

    # check out the source
    factory.addStep(steps.Git(
        repourl='https://github.com/golemfactory/golem.git',
        mode='full', method='fresh'))
    # mode='incremental'))


def __step_add_venv(factory, env_cfg):
    venv_command = env_cfg['venv_command']

    factory.addStep(steps.ShellCommand(
        name='virtualenv',
        haltOnFailure=True,
        command=venv_command + ['.venv']))


def __step_add_requirements(factory, env_cfg, builder_cfg, factory_cfg):
    pip_command = env_cfg['pip_command']
    requirements = ('requirements_files' in builder_cfg
                    and builder_cfg['requirements_files']) or []
    requirements = factory_cfg['requirements_files'] + requirements

    install_req_cmd = pip_command + ['install']
    for rf in requirements:
        install_req_cmd.append('-r')
        install_req_cmd.append(rf)

    pip_install_pyinstaller = pip_command + [
        'install',
        'git+https://github.com/pyinstaller/pyinstaller.git'
    ]
    factory.addStep(steps.ShellSequence(
        name='pip',
        commands=[
            util.ShellArg(logfile='install requirements.txt',
                          haltOnFailure=True,
                          command=install_req_cmd),
            util.ShellArg(logfile='install pyinstaller',
                          haltOnFailure=True,
                          command=pip_install_pyinstaller),
            util.ShellArg(logfile='uninstall enum34',
                          haltOnFailure=True,
                          command=pip_command + ['uninstall', '-y', 'enum34']),
        ]))


def __step_add_main_cmd(factory, env_cfg, factory_cfg):

    python_command = env_cfg['python_command']
    venv_bin_path = util.Interpolate(env_cfg['venv_bin_path'])
    venv_path = util.Interpolate(env_cfg['venv_path'])

    py_main_command = python_command + ['setup.py', 'pyinstaller',
                                        '--package-path', 'dist/golem.tar.gz']
    py_main_env = {
        'PATH': [venv_bin_path, '${PATH}'],
        'VIRTUAL_ENV': venv_path,
    }
    factory.addStep(steps.ShellCommand(name='create binaries',
                                       haltOnFailure=True,
                                       command=py_main_command,
                                       env=py_main_env))


def __step_add_deploy(factory, platform, factory_cfg):
    upload_dest = util.Interpolate(factory_cfg['upload_dest'],
                                   platform=platform)
    upload_url = util.Interpolate(factory_cfg['upload_url'],
                                  buildbot_host=buildbot_host,
                                  platform=platform)
    factory.addStep(steps.FileUpload(
        workersrc=factory_cfg['upload_src'],
        masterdest=upload_dest,
        url=upload_url,
        blocksize=640 * 1024,
        mode=0o644,
    ))


def _make_factory(builder_cfg):

    platform = builder_cfg['os']
    env_cfg = config['environments'][builder_cfg['env']]
    factory_cfg = config['factories'][builder_cfg['job']]

    factory = util.BuildFactory()

    __step_add_checkout(factory)
    __step_add_venv(factory, env_cfg)
    __step_add_requirements(factory, env_cfg, builder_cfg, factory_cfg)
    __step_add_main_cmd(factory, env_cfg, factory_cfg)
    __step_add_deploy(factory, platform, factory_cfg)

    return factory


def _make_builder(builder_cfg):
    cfg_os = builder_cfg['os']

    name = "{}_{}".format(builder_cfg['job'], cfg_os)
    workernames = config['workers'][cfg_os]
    factory = _make_factory(builder_cfg)

    return util.BuilderConfig(name=name, workernames=workernames,
                              factory=factory)


# loop over available OS configurations
os_builder_obj = config['builders']
print(os_builder_obj)
# loop over workers per OS config
for builder_cfg in os_builder_obj:
    print(builder_cfg)
    builder = _make_builder(builder_cfg)
    c['builders'].append(builder)

# ###### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
c['services'].append(
    reporters.GitHubStatusPush(
        token=local_settings['github_api_token'],
        context=util.Interpolate("buildbot/%(prop:buildername)s"),
        startDescription='Build started.',
        endDescription='Build done.'))

# ###### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Golem"
c['titleURL'] = "https://github.com/golemfactory/golem"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = buildbot_host + '/buildbot/'

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    plugins=dict(waterfall_view={}, console_view={}),
    auth=util.GitHubAuth(
        local_settings['github_client_id'],
        local_settings['github_client_secret']),
    authz=util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role="admins"),
            ],
        roleMatchers=[
            util.RolesFromEmails(admins=local_settings['admin_emails'])
            ]
        ),
    change_hook_dialects={
        'github': {
            'strict': True,
            'secret': local_settings['github_webhook_secret'],
        },
    },
)

# ###### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
