# -*- python -*-
# ex: set filetype=python:

import os
import json

from buildbot.plugins import *

local_settings = json.load(open(os.environ['BUILDBOT_SETTINGS']))
buildbot_host = local_settings['host']

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("macOS", local_settings['worker_pass']),
    worker.Worker("linux", local_settings['worker_pass']),
    worker.Worker('windows_server_2016', local_settings['worker_pass']),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
#c['change_source'].append(
    #changes.GitPoller(
        #'https://github.com/golemfactory/golem.git',
        #workdir='gitpoller-workdir', branches=True,
        #pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'buildpackage' build

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="all",
                            treeStableTimer=20,
                            builderNames=["buildpackage_macOS", "buildpackage_linux", "buildpackage_windows"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["buildpackage_macOS", "buildpackage_linux", "buildpackage_windows"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def make_steps(
        platform,
        venv_command,
        python_command,
        pip_command,
        venv_bin_path,
        venv_path,
        requirements_files):

    install_req_cmd = pip_command + ['install']
    for rf in requirements_files:
        install_req_cmd.append('-r')
        install_req_cmd.append(rf)

    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(
        repourl='https://github.com/golemfactory/golem.git',
        mode='full', method='fresh'))
        #mode='incremental'))
    factory.addStep(steps.ShellCommand(
        name='virtualenv',
        haltOnFailure=True,
        command=venv_command + ['.venv']))
    factory.addStep(steps.ShellSequence(
        name='pip',
        commands=[
            util.ShellArg(
                logfile='install requirements.txt',
                haltOnFailure=True,
                command=install_req_cmd),
            util.ShellArg(
                logfile='install pyinstaller',
                haltOnFailure=True,
                command=pip_command + ['install',
                         'git+https://github.com/pyinstaller/pyinstaller.git']),
            util.ShellArg(
                logfile='uninstall enum34',
                haltOnFailure=True,
                command=pip_command + ['uninstall', '-y', 'enum34']),
        ]))
    factory.addStep(steps.ShellCommand(
        name='create binaries',
        haltOnFailure=True,
        command=python_command + ['setup.py', 'pyinstaller',
                 '--package-path', 'dist/golem.tar.gz'],
        env={
            'PATH': [venv_bin_path, '${PATH}'],
            'VIRTUAL_ENV': venv_path,
        }))
    factory.addStep(steps.FileUpload(
        workersrc='dist/golem.tar.gz',
        masterdest=util.Interpolate(
            '/var/build-artifacts/golem-%(prop:got_revision)s-%(kw:platform)s.tar.gz',
            platform=platform),
        url=util.Interpolate(
            '%(kw:buildbot_host)s/artifacts/golem-%(prop:got_revision)s-%(kw:platform)s.tar.gz',
            buildbot_host=buildbot_host,
            platform=platform),
        blocksize=640 * 1024,
        mode=0644,
    ))
    return factory


def make_posix_steps(platform):
    return make_steps(
        platform,
        venv_command=['python3', '-m', 'venv'],
        python_command=['.venv/bin/python'],
        pip_command=['.venv/bin/pip'],
        venv_bin_path=util.Interpolate('%(prop:builddir)s/build/.venv/bin'),
        venv_path=util.Interpolate('%(prop:builddir)s/build/.venv'),
        requirements_files=['requirements.txt'])


def make_windows_steps():
    return make_steps(
        'windows',
        venv_command=['py', '-3', '-m', 'venv'],
        python_command=['.venv\Scripts\python.exe'],
        pip_command=['.venv\Scripts\pip.exe'],
        venv_bin_path=util.Interpolate('%(prop:builddir)s\\build\\.venv\\Scripts'),
        venv_path=util.Interpolate('%(prop:builddir)s\\build\\.venv'),
        requirements_files=['requirements.txt', 'requirements-win.txt'])


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="buildpackage_macOS",
        workernames=["macOS"],
        factory=make_posix_steps('macos')))
c['builders'].append(
    util.BuilderConfig(name="buildpackage_linux",
        workernames=["linux"],
        factory=make_posix_steps('linux')))
c['builders'].append(
    util.BuilderConfig(name="buildpackage_windows",
        workernames=["windows_server_2016"],
        factory=make_windows_steps()))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
c['services'].append(
    reporters.GitHubStatusPush(
        token=local_settings['github_api_token'],
        context=util.Interpolate("buildbot/%(prop:buildername)s"),
        startDescription='Build started.',
        endDescription='Build done.'))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Golem"
c['titleURL'] = "https://github.com/golemfactory/golem"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = buildbot_host + '/buildbot/'

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    plugins=dict(waterfall_view={}, console_view={}),
    auth=util.GitHubAuth(
        local_settings['github_client_id'],
        local_settings['github_client_secret']),
    authz=util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role="admins"),
            ],
        roleMatchers=[
            util.RolesFromEmails(admins=local_settings['admin_emails'])
            ]
        ),
    change_hook_dialects={
        'github': {
            'strict': True,
            'secret': local_settings['github_webhook_secret'],
        },
    },
)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
